Support Int 67h interface to SWAT

I thought this was going to be quite simple.  After a fair amount
of debugging Windows, I found that although they let a VxD hook
a V86 mode interrupt across all VMs, the hook won't get called
(at least for an Int 67h, and possibly others that aren't in
the IDT) unless a valid Int 67h V86 vector has been installed.

There's still a problem with SWATRUN, but I believe this is related
to the way we gain control after the client program terminates.  It
should be reproducible without SwatVxd in the picture.

Files affected:

SWAT_RMI.ASM	In real mode init, use an additional level of
				indirection to pass reference data up to
				SysCriticalInit.  This in turn is gotten from
				our TSR's Int 2fh hook, and is the address of a
				JMPF xxxx:yyyy that we install as an Int 67h handler.
				We'll store the SWAT reference data physical address
				as the operand to the far jump immediate.  We are
				guaranteed to use this value before it's reset to
				a V86 address, since we'll get it at Sys_critical_init
				and we won't set the vector until VM_init.

				Note that this won't work if the resident part of
				SWATVXD is not loaded in 1:1 memory (it should be
				anyway).

SWATSTUB.ASM	Pass segment:offset of resident INT_67 via reference
				data (previously unused) to real mode init.

				Add INT_67, which unconditionally jumps to the
				previous handler.  Note that the actual address
				is set during VM_Init, since the V86MMGR always
				blasts in its own Int 67h handler (which a VxD
				can't hook).

SWATVER.ASM		Bump version.

SWATVXD.ASM		Translate Int 67h calls to SWAT API.

				Hook Int 67h in each VM via V86MMGR service.  It's
				effectively the same as hooking it from the IDT.

				Translate incoming reference data to get the
				segment:offset we need to set Int 67h vector
				in each VM, and to get the original SWATINFO
				address.

				Hook Int 67h in each VM at VM_Init via DOS fn 25h.
				We point to our TSR resident code.  We don't need
				to match this with unhooking at VM_Deinit time
				since the VM is about to be destroyed anyway and
				the code is always there.

