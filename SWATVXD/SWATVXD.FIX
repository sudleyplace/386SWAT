
			QUALITAS CONFIDENTIAL

			 SWATVXD FIX FILE
			     28 APR 92
		       Versions 2.66 and above

컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴

*  Initial revision - two years of SWATVXD grandfathered up to this point

  Description:	The first TWT of the SWATVXD includes a .FIX file.
		This version of SWATVXD adds support for symbolic
		debugging.  Symbols for VMM and other VxD services
		are automatically generated from internal name tables
		and some magic.  Symbols for SWATVXD and 386MAX.VXD
		are generated via a .SSF file.	This works only for
		Windows 3.1.
		Old debugging code has been removed.
		SWATVXD SYSTEM.INI cookies have been moved from [386Enh]
		to [386SWAT].  RealModeBreak=TRUE has been added to
		allow for easier debugging of the RMI code.
  When:  28 APR 92.
  Who:	WRL
  SW/HW Environment: Windows debugging
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.66

*  Fix bug in CATSSF

  Description:	While looking for a bug in the SWATVXD symbol support, I
		ran into another bug.  CATSSF was using the wrong file handles
		for some defensive _lseek() calls.
  When:  29 APR 92.
  Who:	WRL
  SW/HW Environment: Windows debugging
  Symptom:  None, but don't ask me how it worked.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.67

*  Move symbol support code to its own file

  Description:	As the code and data for the SWATVXD's symbol support gets
		bigger, it has made the main .ASM file unmanagable.  I've
		moved all the symbol support code to a new module, SWAT_SYM.ASM.
  When:  29 APR 92.
  Who:	WRL
  SW/HW Environment: Windows debugging
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.67

*  Fix bug in symbol support

  Description:	After using the 386SWAT symbol lookup service, I incorrectly
		used [EAX] rather than [EDI] to inspect the location.  So
		now we use EDI.
  When:  30 APR 92.
  Who:	WRL
  SW/HW Environment: Windows debugging
  Symptom:  LoadHi_IGROUP symbols don't get translated.
  Temporary Workaround:  None, debug the old way.
  Version:  2.68

*  Add HOOKPM= SYSTEM.INI keyword and apparatus to debug protected mode APIs

  Description:	This TWT adds a new feature to the SWATVXD.  We now have
		the ability to break on a VxD's protected mode API entry.
		The SYSTEM.INI keyword to break on a VxD's control proc
		has been changed to HOOKVXD=.  The new PM API keyword
		is HOOKPM=name,register name,fn,fn,...	The register name
		specifies the register in the client structure that holds
		the function code.  Typically this is AX or DX.  The
		feature was built to debug the SHELL device, which uses DX.

		Examples of the keywords in the [386SWAT] section of
		SYSTEM.INI follow:

		HookVxD=SHELL,0,1,2,3
		HookPM=SHELL,DX,0,1,2,3,4,6

		Another SYSTEM.INI switch has been added, REHOOK123=FALSE.
		The default is TRUE which provides the old behavior.
		This switch, if FALSE, causes SWATVXD to not continually
		blast INT 1, 2, and 3 directly into the IDT during each
		WIN386 control call.  This is useful when debugging with
		CodeView and SWAT at the same time.

		Ctrl+Alt+Pad5 now forces INT 1, 2, and 3 to be rehooked.

		Some obsolete debugging code has been removed.
  When:  18 JUN 92.
  Who:	WRL
  SW/HW Environment: Windows debugging
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.72

* Add support for the v0.11 .SSF file format.

  Description:	Add support for the v0.11 .SSF file format.
		The new file format uses an LSEEK address at offset 0Ah in
		the .SSF file.	The older format assumes the size of the header.
		The old format is still supported.
  When:  14 SEP 92.
  Who:	WRL
  SW/HW Environment: Windows debugging
  Symptom:  SWATVXD symbolic debugging stops working after you get a new MAPSSF.
  Temporary Workaround:  None.
  Version:  2.74

* Use MAPSSF -t rather than CATSSF to build the combined WIN.SSF file.

  Description:	MAPSSF now works properly when building concatenated .SSF files.
		CATSSF is no longer used in the MAKEFILE.
  When:  14 SEP 92.
  Who:	WRL
  SW/HW Environment: Windows debugging
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.74

* Add NOSWAT option to the WIN.COM command line.

  Description:	Using other Windows debuggers like Soft-ICE/W or CVW in the
		presence of SWATVXD can be a pain.  (Sometimes it's damn useful)
		This changes let's you type 'WIN NOSWAT' to start Windows
		without the SWATVXD.  The option is blanked from the command
		line to avoid a complaint from PROGMAN.
  When:  14 SEP 92.
  Who:	WRL
  SW/HW Environment: Windows debugging
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.74

* Add SYSTEM.INI switches to the /? help text.

  Description:	Remembering all the SWATVXD SYSTEM.INI options is getting
		more difficult.  The /? help text now shows 'em.
  When:  14 SEP 92.
  Who:	WRL
  SW/HW Environment: Windows debugging
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.74

* Don't undo the HookVxD= apparatus at SystemExit if using DebugThruExit=ON.

  Description:	Don't undo the HookVxD= apparatus at SystemExit if using the
		DebugThruExit=ON option.  This allows debugging other VxD's
		easily at SystemExit and SysCriticalExit.
  When:  14 SEP 92.
  Who:	WRL
  SW/HW Environment: Windows debugging
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.74

* Avoid hang on fatal error exit from Windows

  Description:	The WIN386 Fatal_Error_Handler service recognizes the low bit
		of EAX as a hang-on-exit flag.	If this bit is set, the WIN386
		loader will sit in a JMP $ loop when control returns to real
		mode.  Until this was understood, there was a lot of extra
		rebooting.  This change ensures the EF_Hang_On_Exit flag is
		clear when the SWATVXD transfers control from its local
		Fatal_Error_Handler service to the original in WIN386.
  When:  28 SEP 92.
  Who:	WRL
  SW/HW Environment: Windows debugging
  Symptom:  The DOS prompt never comes back after a Windows fatal error exit.
  Temporary Workaround:  Ctrl+Alt+Pad5 into SWAT, Ctrl+Down to skip the
			 infinite loop, and hit ESC to continue.
  Version:  2.75

* Use the proper client register in HookPM=device,reg,fn,fn display

  Description:	The groovy code in SWATVXD that hooks a VxD's protected mode
		API entry point allows a client register to be specified by
		name.  The code that displays the register contents when the
		breakpoint is fired always displayed Client_DX.  Now we display
		the correct client register.
  When:  29 SEP 92.
  Who:	WRL
  SW/HW Environment: Debugging a VxD's protected mode API services.
  Symptom:  The SWATMSG always shows the client DX register when stopping
	    at a HookPM= breakpoint.  For example, when stopping in the SERVER
	    VxD's protected mode API which uses AX for the functions, the
	    SWAT display always shows SERVER[17].  17 happens to be the client's
	    DX.  The correct display is SERVER[2], from the client's AX.
  Temporary Workaround:  None.
  Version:  2.76

* Send address of Cur_VM_Handle and Sys_VM_Handle to 386SWAT.LOD via VCPI.

  Description: Work in the Cannonball SuperVM feature requires changing the
	       current VM with event callbacks.  To make this easier to debug,
	       386SWAT.LOD and SWATVXD have been changed to display the current
	       VM handle on the F9 screen just above the stack display.
	       SWATVXD double hooks the Get_Cur_VM_Handle and Get_Sys_VM_Handle
	       services to get their addresses.  The address of the variables
	       is plucked from the first instruction of the routines and is
	       sent to SWAT.LOD.
  When:  11 NOV 92.
  Who:	WRL
  SW/HW Environment: Debugging Windows
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.77

* Display VM_Not_Executeable reason flags in english.

  Description:	The reason flags from VM_Not_Executeable have become more
		interesting due to the SuperVM work.  We now convert the
		binary flag word to an ASCII string for the display.
  When:  11 NOV 92.
  Who:	WRL
  SW/HW Environment: Debugging Windows
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.77

* Create 3rd selector for 386SWAT.LOD's new PGROUP2 segment.

  Description:	386SWAT.LOD has outgrown its 64K code segment and has gained
		a new one, PGROUP2.  The SWATVXD now obtains the base and length
		of the segment from the SWATINFO structure (version 5) and
		creates the appropriate code selector, consecutive with the
		data selector.
  When:  11 NOV 92.
  Who:	WRL
  SW/HW Environment: Debugging Windows
  Symptom:  The system will crash randomly if the new SWAT with PGROUP2 is used.
  Temporary Workaround:  None.
  Version:  2.77

* Warn the user if DebugThruExit is set in the [386SWAT] section of SYSTEM.INI

  Description: Since DebugThruExit is dangerous and has fooled me several
	       times, I now announce the fact that the option is in effect.
  When:  27 JAN 93.
  Who:	WRL
  SW/HW Environment: Debugging Windows
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.78

* Don't close STDIN if 386MAX$$ isn't installed

  Description:	The 386MAX.SYS detection code incorrectly closed STDIN if
		386MAX wasn't installed.  You couldn't hit any key to continue.
  When:  13 APR 93.
  Who:	WRL
  SW/HW Environment: Debugging Windows
  Symptom:  System appears to be wedged up after SWATVXD reports 386MAX isn't
	    installed.
  Temporary Workaround:  Don't load SWATVXD if 386MAX isn't installed.
  Version:  2.79

* Announce the presence of the Windows for Workgroups VxDs.

  Description:	To leave some character behind for others, I now display a
		message if the WFW devices are installed.  This saves some
		time barking up the wrong tree.
  When:  13 APR 93.
  Who:	WRL
  SW/HW Environment: Debugging Windows
  Symptom:  New line of output on the mono screen or WDEB386 terminal.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.80

* Add PM_BIOS to the symbol support and /? screen

  Description:	Since the Thinkpad is becoming more of a problem, I've added
		some information about the PM_BIOS.386 device to the SWATVXD
		/? output.  It and the WFW SERVER have also been added to the
		symbols sent to SWAT.
		386SWAT.LOD has been changed to display these VxD's services
		when disassembling INT 20h under Windows' GDT/IDT.
  When:  13 APR 93.
  Who:	WRL
  SW/HW Environment: Debugging Windows
  Symptom:  New symbols and help output magically show up.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.81

*  Move include files to common P:\INCLUDE directory

  Description:	The include files used to build 386MAX.VXD, SWATVXD, and QPOPUP
		have gotten out of hand.  I've moved a bunch of them into the
		P:\INCLUDE directory and changed the MAKEFILEs accordingly.
		VMAXAPI.H, VMAXAPI.INC, VMM.INC, WFW.INC, PM_BIOS.INC, and
		SWATVXD.INC have been moved.  The 386MAX.VXD, SWATVXD, and
		QPOPUP projects are affected.
		This should ease the construction of the standalone DOSMAX.386.
  When: 28 APR 93.
  Who:	WRL
  SW/HW Environment:  386MAX.VXD, SWATVXD, and QPOPUP.
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Test Procedure:  None.
  Version:  2.82

*  Hook GetSetDetailedVMError to get more useful information on a fatal error

  Description:	A VxD will often call GetSetDetailedVMError just prior to
		issuing a fatal error.	There are about a dozen of these
		specific error codes, which can save a lot of time while trying
		to track down a fatal error.  SWATVXD now hooks the service
		during its initialization and filters calls to it.  After
		filtering out 'get' calls, NULL error codes, and one
		particularly popular default error code, it sends message text
		to 386SWAT.LOD and breaks.
  When: 28 APR 93.
  Who:	WRL
  SW/HW Environment:  Windows debugging
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Test Procedure:  None.
  Version:  2.82

*  Allow SWATVXD to work with device= SWAT to debug Windows without 386MAX

  Description:	In order to ease the construction the standalone DOSMAX,
		SWATVXD has been modified slightly to work with device= SWAT.
		The checks for 386MAX.SYS have been relaxed, and additional
		API info is displayed in real mode.  Additional changes are
		made in 386SWAT.LOD to complete the work.
  When: 28 APR 93.
  Who:	WRL
  SW/HW Environment:  Windows debugging with device= SWAT.
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Test Procedure:  None.
  Version:  2.82

* Convert SWAT to USE32 Code Segment

  Description:	As part of converting SWAT to a USE32 code segment, we
		also need to modify SWAT VxD so it sets the D-bit for
		SWAT's code selector when running under Windows.  This
		is done by checking the @MD_USE32 bit in the SWAT
		header so SWATVXD can be used with older (USE16)
		versions of SWAT.
  When:  5 Oct 93.
  Who:	BOB
  SW/HW Environment:  Windows debugging
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.83

*

  Description:
  When:
  Who:	WRL
  SW/HW Environment: Windows debugging
  Symptom:  None, it's not a bug.
  Temporary Workaround:  None, it's not a bug.
  Version:  2.84

